load("utilities/utilities.sage")
load("utilities/algebra_type.sage")
load("src/maximal_orders/find_maximal_orders.sage")


## List of tensor product of quaternion algebra equipped with a maximal order


## Tensor prodcut 1 

A1 = QuaternionAlgebra(QQ,-1,-1)
B1 = QuaternionAlgebra(QQ,-1,-2)
C1 = tensor(A1,opposite(B1))

print("maximal order 1 ... ")

e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15 = C1.basis()

BO1 = [1/4*e0 + 1/8*e2 + 1/8*e3 + 1/4*e5 - 1/8*e6 + 1/8*e7 - 1/4*e8 + 1/8*e10 + 1/8*e11 + 1/4*e13 + 1/8*e14 - 1/8*e15,
 1/4*e0 + 1/4*e1 - 1/4*e4 + 1/4*e5 + 1/4*e10 - 1/4*e15,
 1/4*e1 + 1/8*e2 - 1/8*e3 - 1/4*e5 + 1/8*e6 - 1/8*e7 + 1/4*e8 + 1/8*e10 + 1/8*e11 + 1/4*e12 - 1/8*e14 - 1/8*e15,
 1/4*e0 + 1/8*e2 + 1/8*e3 + 1/4*e4 - 1/8*e6 - 1/8*e7 - 1/4*e9 - 1/8*e10 + 1/8*e11 + 1/4*e13 - 1/8*e14 + 1/8*e15,
 -1/4*e0 - 1/4*e1 + 1/4*e4 - 1/4*e5 + 1/4*e10 - 1/4*e15,
 1/4*e3 + 1/4*e4 - 1/4*e5 - 1/4*e8 - 1/4*e9 - 1/4*e14,
 -1/4*e0 - 1/8*e2 + 1/8*e3 - 1/4*e4 + 1/8*e6 - 1/8*e7 - 1/4*e9 - 1/8*e10 - 1/8*e11 - 1/4*e13 + 1/8*e14 + 1/8*e15,
 -1/4*e0 - 1/8*e2 - 1/8*e3 - 1/4*e5 - 1/8*e6 + 1/8*e7 + 1/4*e9 - 1/8*e10 + 1/8*e11 - 1/4*e12 + 1/8*e14 + 1/8*e15,
 -1/4*e0 + 1/8*e2 - 1/8*e3 - 1/4*e5 - 1/8*e6 - 1/8*e7 - 1/4*e8 - 1/8*e10 + 1/8*e11 - 1/4*e13 + 1/8*e14 + 1/8*e15,
 1/4*e3 + 1/4*e4 + 1/4*e5 - 1/4*e10 - 1/4*e12 + 1/4*e13,
 1/4*e1 + 1/8*e2 - 1/8*e3 + 1/4*e5 - 1/8*e6 + 1/8*e7 - 1/4*e8 - 1/8*e10 - 1/8*e11 + 1/4*e12 - 1/8*e14 - 1/8*e15,
 1/4*e1 + 1/8*e2 - 1/8*e3 + 1/4*e4 + 1/8*e6 + 1/8*e7 - 1/4*e8 + 1/8*e10 + 1/8*e11 + 1/4*e13 - 1/8*e14 + 1/8*e15,
 -1/4*e0 + 1/8*e2 - 1/8*e3 + 1/4*e5 + 1/8*e6 + 1/8*e7 + 1/4*e8 + 1/8*e10 - 1/8*e11 - 1/4*e13 + 1/8*e14 + 1/8*e15,
 -1/4*e0 - 1/4*e1 + 1/4*e6 + 1/4*e11 - 1/4*e12 + 1/4*e13,
 -1/4*e0 - 1/8*e2 + 1/8*e3 + 1/4*e5 - 1/8*e6 - 1/8*e7 - 1/4*e8 + 1/8*e10 - 1/8*e11 + 1/4*e13 + 1/8*e14 + 1/8*e15,
 1/4*e1 - 1/8*e2 - 1/8*e3 + 1/4*e5 + 1/8*e6 + 1/8*e7 + 1/4*e8 - 1/8*e10 + 1/8*e11 + 1/4*e12 + 1/8*e14 - 1/8*e15]

C1 = finite_dimensional_algebra_format(C1,BO1)


## Tensor prodcut 2

A2 = QuaternionAlgebra(QQ,-53,-17)
B2 = QuaternionAlgebra(QQ,-53*4,-17*53)
C2 = tensor(A2,opposite(B2))

print("maximal order 2 ... ")

e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15 = C2.basis()

BO2 = [-1/5618*e5 - 6/47753*e6 - 13/95506*e7 - 1/3604*e9 - 3/15317*e10 - 13/61268*e11 - 41/191012*e13 - 123/811801*e14 - 533/3247204*e15,
 1/5618*e5 + 6/47753*e6 - 21/95506*e7 + 1/3604*e9 + 3/15317*e10 - 21/61268*e11 + 41/191012*e13 + 123/811801*e14 - 861/3247204*e15,
 -2/2809*e7 + 1/1802*e11 + 12/47753*e15,
 1/11236*e5 + 3/47753*e6 + 13/191012*e7 + 1/3604*e9 + 3/15317*e10 + 13/61268*e11 - 28/47753*e13 - 336/811801*e14 - 364/811801*e15,
 -1/11236*e5 - 3/47753*e6 + 21/191012*e7 - 1/3604*e9 - 3/15317*e10 + 21/61268*e11 + 28/47753*e13 + 336/811801*e14 - 588/811801*e15,
 -2/2809*e5 - 24/47753*e6 + 8/47753*e7 + 1/1802*e9 + 6/15317*e10 - 2/15317*e11 + 12/47753*e13 + 144/811801*e14 - 48/811801*e15,
 -3/5618*e5 + 35/47753*e6 - 6/47753*e7 - 3/3604*e9 + 35/30634*e10 - 3/15317*e11 - 123/191012*e13 + 1435/1623602*e14 - 123/811801*e15,
 -3/11236*e5 + 35/95506*e6 - 3/47753*e7 - 3/3604*e9 + 35/30634*e10 - 3/15317*e11 + 84/47753*e13 - 1960/811801*e14 + 336/811801*e15,
 1/424*e1 + 3/1802*e2 + 13/7208*e3 + 23/22472*e5 - 143/95506*e6 + 83/382024*e7 - 3/7208*e9 + 22/15317*e10 + 15/122536*e11 - 191/382024*e13 + 699/1623602*e14 - 1187/6494408*e15,
 -1/424*e1 - 3/1802*e2 - 13/7208*e3 + 25/22472*e5 - 137/95506*e6 - 163/382024*e7 - 9/7208*e9 + 13/15317*e10 + 5/122536*e11 - 97/382024*e13 + 981/1623602*e14 + 1667/6494408*e15,
 -1/424*e1 - 3/1802*e2 + 21/7208*e3 - 23/22472*e5 + 143/95506*e6 + 155/382024*e7 + 3/7208*e9 - 22/15317*e10 + 19/122536*e11 + 191/382024*e13 - 699/1623602*e14 - 2043/6494408*e15,
 3/424*e1 - 35/3604*e2 + 3/1802*e3 + 7/22472*e5 - 223/191012*e6 - 11/95506*e7 - 1/7208*e9 + 47/61268*e10 + 7/61268*e11 + 435/382024*e13 - 4227/3247204*e14 + 543/1623602*e15,
 1/106*e4 + 3/11236*e5 - 35/95506*e6 - 11/95506*e7 + 1/68*e8 + 3/7208*e9 - 35/61268*e10 - 39/122536*e11 + 41/3604*e12 + 123/382024*e13 - 1435/3247204*e14 + 3603/6494408*e15,
 -1/212*e4 + 3/22472*e5 - 35/191012*e6 - 73/382024*e7 - 1/68*e8 + 3/7208*e9 - 35/61268*e10 - 39/122536*e11 + 28/901*e12 - 42/47753*e13 + 980/811801*e14 - 417/3247204*e15,
 -5/106*e4 - 15/11236*e5 + 175/95506*e6 + 2/47753*e7 + 1/68*e8 + 3/7208*e9 - 35/61268*e10 - 39/122536*e11 + 7/3604*e12 + 21/382024*e13 - 245/3247204*e14 + 3773/6494408*e15,
 -1/4*e0 - 1/424*e3 - 1/53*e4 + 17/22472*e5 - 57/191012*e6 + 19/191012*e7 + 1/68*e8 + 1/1802*e9 - 41/30634*e10 - 19/122536*e11 + 6/901*e12 - 261/382024*e13 + 2197/3247204*e14 + 685/1623602*e15]

C2 = finite_dimensional_algebra_format(C2,BO2)

## Tensor prodcut 3


A3 = QuaternionAlgebra(QQ, -101, -103)
B3 = QuaternionAlgebra(QQ, -10100, -10403)
C3 = tensor(A3, opposite(B3))

print("maximal order 3 ... ")

e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15 = C3.basis()

BO3 = [1/20806*e11 + 4/52015*e15,
 -1/104030*e11 - 1/10403*e14,
 1/10609*e10 + 271/10715090*e11 + 38/1071509*e14 + 207/10715090*e15,
 11/104030*e11 - 3/104030*e15,
 -1/20806*e6 - 19/208060*e7 + 1/21218*e10 - 347/21430180*e11 + 19/1071509*e14 + 67/1071509*e15,
 -1/20806*e2 - 19/208060*e3 + 1/208060*e9 - 1/208060*e11 - 19/208060*e13 - 1/20806*e14,
 2/10403*e6 - 27/208060*e7 + 1/41612*e11 + 2/52015*e15,
 -5/20806*e2 + 2/52015*e3 + 1/41612*e9 - 1/208060*e11 + 2/52015*e13 - 1/20806*e14,
 1/4040*e1 + 1/10403*e2 - 27/416120*e3 - 1/104030*e9 + 51/1071509*e10 - 61/10715090*e11 - 27/416120*e13 - 42/1071509*e14 + 165/8572072*e15,
 -1/10403*e2 + 13/41612*e3 + 1/104030*e9 + 3/104030*e11 - 19/104030*e13 - 11/208060*e15,
 -1/4040*e5 + 1/10403*e6 - 27/416120*e7 + 1/4120*e9 + 17/416120*e11 + 19/208060*e13 - 7/208060*e15,
 1/4040*e5 + 1/10403*e6 - 27/416120*e7 + 1/4120*e9 - 17/416120*e11 + 19/208060*e13 + 7/208060*e15,
 1/404*e4 - 1/41612*e6 + 19/21014060*e7 - 1/412*e8 + 1/42436*e10 - 19/21430180*e11 - 19/20806*e12 + 19/2143018*e14 + 20857/1082224090*e15,
 -1/404*e4 - 1/41612*e6 + 19/21014060*e7 - 1/412*e8 - 1/42436*e10 + 19/21430180*e11 - 19/20806*e12 - 19/2143018*e14 - 20857/1082224090*e15,
 -1/204020*e7 + 1/208060*e11 + 1/202*e12 + 1/20806*e14,
 1/4*e0 - 5/41612*e2 + 1/52015*e3 + 1/10403*e6 - 328/5253515*e7 - 12/52015*e9 - 2/52015*e11 - 1/404*e12 - 3/41612*e13 + 1/41612*e14 + 7/208060*e15]

C3 = finite_dimensional_algebra_format(C3, BO3)

## Tensor product 4


A4 = QuaternionAlgebra(QQ, -1234, -5678)
B4 = QuaternionAlgebra(QQ, -12340000, -7006652)
C4 = tensor(A4, opposite(B4))

print("maximal order 4 ... ")

e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15 = C4.basis()

BO4 = [-1/700665200*e15,
 -1/350332600*e11,
 1/7006652*e14,
 -497/700665200*e3 + 1/1751663*e6 - 1/1401330400*e15,
 337/350332600*e3 + 3/3503326*e6,
 -1/493600*e7 + 1/1401330400*e11,
 1/493600*e13 + 1/2802660800*e15,
 3/7006652*e2 - 1/493600*e5 - 207921/1729241713600*e7 - 369/280266080*e9 - 3/2802660800*e11 + 1/1751663*e12 - 1/14013304*e14,
 -3/7006652*e2 - 1/493600*e5 + 207921/1729241713600*e7 + 369/280266080*e9 - 3/2802660800*e11 - 1/1751663*e12 - 1/14013304*e14,
 5/3503326*e2 - 1/987200*e5 + 2682147/3458483427200*e7 + 125/112106432*e9 - 1/5605321600*e11 + 3/1751663*e12,
 1/412156*e2 - 1/50860050400*e7 + 1/41215600*e9 - 1/700665200*e11 - 1/412156*e12,
 -1/246800*e1 - 337/1401330400*e3 - 3/14013304*e6 + 1/14013304*e10,
 -1/493600*e1 - 369/560532160*e3 - 1/3503326*e6 - 77/3503326*e10 - 1/987200*e13 + 3/5605321600*e15,
 337/700665200*e3 + 3/7006652*e6 + 1/5678*e8 + 1171/1401330400*e13 - 1/2802660800*e15,
 1/493600*e1 - 1011/2802660800*e3 - 1/4936*e4 - 9/28026608*e6 + 1/22712*e8 - 1/28026608*e10 + 401/560532160*e13 - 1233/3458483427200*e15,
 1/4*e0 + 23/14013304*e2 - 103969/864620856800*e7 - 457/350332600*e9 + 1/1401330400*e11 - 9/14013304*e12 - 1/28026608*e14]

C4 = finite_dimensional_algebra_format(C4, BO4)


## Tensor prodcut 5


A5 = QuaternionAlgebra(QQ, -33554431, -33554433)
B5 = QuaternionAlgebra(QQ, -33554431000000, -1125899906842623)
C5 = tensor(A5, opposite(B5))

print("maximal order 5 ... ")

e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15 = C5.basis()

BO5 = [-1/2251799813685246000*e11 - 1/2251799813685246000*e15,
 -1/2251799813685246000*e11 + 1/2251799813685246000*e15,
 -1/36319349668831000*e7 - 19781/609337592533180988911500*e15,
 -2867/75059993789508200*e3 + 2353/18159674834415500*e5 - 108127573/812450123377574651882*e6 - 1/72638699337662000*e7 + 29/363193496688310*e13 + 298018267/2437350370132723955646*e14 + 347613/812450123377574651882000*e15,
 -148351/1125899906842623000*e3 + 1833/18159674834415500*e5 - 127062589/1218675185066361977823*e6 - 3721/36319349668831000*e13 - 190614302/1218675185066361977823*e14,
 -164011/2251799813685246000*e3 - 814/4539918708603875*e5 - 104069081/1218675185066361977823*e6 + 1/72638699337662000*e7 - 263/1171591924801000*e13 + 16539553/406225061688787325941*e14 + 19781/1218675185066361977823000*e15,
 200831/1125899906842623000*e3 + 5581/36319349668831000*e5 - 405417455/2437350370132723955646*e6 + 1/72638699337662000*e7 - 7141/36319349668831000*e13 - 55517804/1218675185066361977823*e14 + 19781/1218675185066361977823000*e15,
 95369/750599937895082000*e3 - 4049/18159674834415500*e5 - 124355578/406225061688787325941*e6 - 1/72638699337662000*e7 + 881/3631934966883100*e13 - 18774829/812450123377574651882*e14 + 347613/812450123377574651882000*e15,
 1/16777215500*e1 - 99535/4503599627370492*e2 - 124039/1501199875790164000*e3 + 3201/18159674834415500*e5 + 140583583/1624900246755149303764*e6 + 1963477/157248410976304771332000*e7 + 7/33554431000*e9 + 16069/375299968947541*e10 - 591/7263869933766200*e13 + 177171377/2437350370132723955646*e14 + 353141/2437350370132723955646000*e15,
 -13/67108862000*e1 - 358/3301759257603*e2 - 130729/750599937895082000*e3 + 2791/72638699337662000*e5 - 28848407/812450123377574651882*e6 - 680389/55394326593925544446500*e7 + 1/4160749692*e10 - 1/4503599627370492000*e11 + 79/907983741720775*e13 + 27825271/4874700740265447911292*e14 + 732617/4874700740265447911292000*e15,
 -3/13421772400*e1 + 25664/1125899906842623*e2 - 93779/450359962737049200*e3 + 711/72638699337662000*e5 + 309515021/2437350370132723955646*e6 - 4144/6093375925331809889115*e7 + 1/16777215500*e9 - 295484/1125899906842623*e10 - 3461/36319349668831000*e13 + 141153920/1218675185066361977823*e14 - 223627/609337592533180988911500*e15,
 -1/33554431000*e1 - 163811/1501199875790164*e2 - 124039/1501199875790164000*e3 + 3201/18159674834415500*e5 + 140583583/1624900246755149303764*e6 + 576159297/50371907649409628416684000*e7 + 243583363/2251799813685246000*e9 - 29327/1125899906842623*e10 - 1/2080374846*e12 - 591/7263869933766200*e13 + 177171377/2437350370132723955646*e14 - 718579/2437350370132723955646000*e15,
 -1/16777215500*e1 + 754779/1501199875790164*e2 - 15083/900719925474098400*e3 + 4569/36319349668831000*e5 + 675875927/4874700740265447911292*e6 + 6222817/1624900246755149303764000*e7 - 1/67108862000*e9 + 73871/1125899906842623*e10 - 2189/72638699337662000*e13 + 367785679/2437350370132723955646*e14 - 172923/812450123377574651882000*e15,
 -3/67108862000*e1 - 195949/4503599627370492*e2 + 99959/1501199875790164000*e3 + 12831/72638699337662000*e5 + 246164327/1624900246755149303764*e6 + 2001163093/151115722948228885250052000*e7 - 1/134217732*e8 - 226178699/4503599627370492000*e9 - 38767/1125899906842623*e10 - 1/4160749692*e12 - 150500334337/4874700740265447911292000*e13 + 209594753/2437350370132723955646*e14 + 586103/2437350370132723955646000*e15,
 1/6710886200*e1 - 131673/750599937895082*e2 + 6678/46912496118442625*e3 + 1/67108862*e4 + 591/14527739867532400*e5 - 72762935/406225061688787325941*e6 - 43538107/25185953824704814208342000*e7 - 30652969/2251799813685246000*e9 - 100585/2251799813685246*e10 + 19781/1125899906842623*e12 + 3201/72638699337662000*e13 - 7165487/36929551062617029631*e14 + 6709103/25185953824704814208342000*e15,
 1/4*e0 + 1/26843544800*e1 - 369355/2251799813685246*e2 + 64447/562949953421311500*e3 - 1/134217724*e4 - 2331/29055479735064800*e5 - 146977681/1218675185066361977823*e6 + 514781539/75557861474114442625026000*e7 - 67471549/562949953421311500*e9 + 447397/4503599627370492*e10 + 1/4503599627370492000*e11 - 19781/2251799813685246*e12 + 1929/72638699337662000*e13 + 496176349/4874700740265447911292*e14 + 15189751/151115722948228885250052000*e15]

C5 = finite_dimensional_algebra_format(C5, BO5)


## Tensor prodcut 6


A6 = QuaternionAlgebra(QQ, -(2**50 - 1), -(2**50 + 1))
B6 = QuaternionAlgebra(QQ, -(2**100 - 2**50), -(2**100 - 1))
C6 = tensor(A6, opposite(B6))

print("maximal order 6 ... ")

e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15 = C6.basis()

BO6 = [1/28356863910078205288614550619291648000*e11 - 1/17014118346046923173168730371574988800*e15,
 1/6860531591147940705654532260432445440*e7 - 1/17014118346046923173168730371574988800*e11 - 2663827595131/3089708751745740921832418031038803234477207191552000*e15,
 -1/7733690157294055987803968350715904000*e11 - 3/28356863910078205288614550619291648000*e15,
 361853417/138326165415015635554217320094105600*e3 - 139364569/44261494136438327133255046841499648*e5 - 322162864402789/9208049630361023312307649943348178966275475*e6 + 5/112512718094826227572734329071092105216*e7 - 1/17014118346046923173168730371574988800*e11 - 51106140119/6860531591147940705654532260432445440*e13 - 312946741123099489/92080496303610233123076499433481789662754750*e14 - 134544585179/49834012124931305190845452113529084427051728896000*e15,
 -78942401/69163082707507817777108660047052800*e3 + 3075592439/686053159114794070565453226043244544*e5 + 78478186962664013/18416099260722046624615299886696357932550950*e6 - 23/562563590474131137863671645355460526080*e7 - 1/85070591730234615865843651857874944000*e11 + 5434057147/857566448893492588206816532554055680*e13 - 732043073491700657/92080496303610233123076499433481789662754750*e14 + 12553856009377/1544854375872870460916209015519401617238603595776000*e15,
 3789794057/414978496245046906662651960282316800*e3 + 310534127/457368772743196047043635484028829696*e5 + 10376033699569504/3069349876787007770769216647782726322091825*e6 - 7/112512718094826227572734329071092105216*e7 - 1/28356863910078205288614550619291648000*e11 + 4307402281/762281287905326745072725806714716160*e13 - 40204575408600887/15346749383935038853846083238913631610459125*e14 - 184446029908081/3089708751745740921832418031038803234477207191552000*e15,
 501729809/207489248122523453331325980141158400*e3 + 543431323/57171096592899505880454435503603712*e5 - 14404283289601889/3069349876787007770769216647782726322091825*e6 - 1/35160224404633196116479477834716282880*e7 - 1/42535295865117307932921825928937472000*e11 - 8184414983/2286843863715980235218177420144148480*e13 - 148044377279242403/30693498767870077707692166477827263220918250*e14 - 477113317403/15071750008515809374792283078238064558425400934400*e15,
 586490881/414978496245046906662651960282316800*e3 + 170700103/19057032197633168626818145167867904*e5 + 65021634247919237/3069349876787007770769216647782726322091825*e6 - 1/62507065608236793095963516150606725120*e7 - 1/21267647932558653966460912964468736000*e11 - 8769096971/2286843863715980235218177420144148480*e13 + 22250621649153307/3069349876787007770769216647782726322091825*e14 - 2095743467207/85825243104048358939789389751077867624366866432000*e15,
 -665980729/207489248122523453331325980141158400*e3 + 6825472195/1372106318229588141130906452086489088*e5 + 12797105951260327/9208049630361023312307649943348178966275475*e6 + 1/31253532804118396547981758075303362560*e7 - 197/166552280256047554232320*e9 - 3370139823/1117713432459299042179888847750*e10 + 13/697578852187923850099917945234574540800*e11 - 673874209883/112512718094826227572734329071092105216*e13 + 240850316334701653/75506006968960391160922729535455067523458895*e14 + 98622096705203/2639126225449487037398523734845644429449281142784000*e15,
 23693379/34581541353753908888554330023526400*e3 - 2516021627/1372106318229588141130906452086489088*e5 + 28233914480601641/18416099260722046624615299886696357932550950*e6 + 13/562563590474131137863671645355460526080*e7 + 637/249828420384071331348480*e9 - 17864641331/6706280594755794253079333086500*e10 - 323/6975788521879238500999179452345745408000*e11 + 2046832084903/281281795237065568931835822677730263040*e13 - 27587929778185881953/7550600696896039116092272953545506752345889500*e14 + 691757277935957/253356117643150755590258278545181865227130989707264000*e15,
 -197/25185954575304752103424*e1 - 3370139823/169020080030430586866227094050*e2 - 2702516371/773369015729405598780396835071590400*e3 - 9629938657/2744212636459176282261812904172978176*e5 - 6189127936351999/18416099260722046624615299886696357932550950*e6 + 212818140847/4827669924602720190363153173498130053870636236800*e7 + 3/5867182599928947933184*e9 - 8548691079/6299839346588776419559373505500*e10 + 13/634162592898112590999925404758704128000*e11 + 21224540077/7032044880926639223295895566943256576*e13 + 28345458721523037247/7550600696896039116092272953545506752345889500*e14 + 2152048267810117/253356117643150755590258278545181865227130989707264000*e15,
 -637/37778931862957128155136*e1 + 17864641331/1014120480182583521197362564300*e2 - 96422342429/34028236692093846346337460743149977600*e3 - 398298767/76228128790532674507272580671471616*e5 - 12462411021250511/12277399507148031083076866591130905288367300*e6 + 70076401112411/1235883500698296368732967212415521293790882876620800*e7 + 23/645390085992184272650240*e9 - 58306319207/34649116406238270307576554280250*e10 + 1/54498347827181550789056089471451136000*e11 + 1231375043/1465009350193049838186644909779845120*e13 - 1198992778519952561/419477816494224395338459608530305930685882750*e14 + 2787465354374147/63339029410787688897564569636295466306782747426816000*e15,
 -180398729/207489248122523453331325980141158400*e3 + 1/2251799813685246*e4 + 5603274289/2744212636459176282261812904172978176*e5 + 81695837463995509/18416099260722046624615299886696357932550950*e6 - 49/1937719033855340585974869000668808478720*e7 - 339710102592937/548842527291836231392539689405644800*e9 - 3338639591/6706280594755794253079333086500*e10 + 337/6975788521879238500999179452345745408000*e11 + 4191486934414/6183661464527948299983918075*e12 - 1105380274577/562563590474131137863671645355460526080*e13 - 4610347823310172727/1510120139379207823218454590709101350469177900*e14 + 166322594733742223/2618013215645891141099335544966879274013686893641728000*e15,
 439295743/138326165415015635554217320094105600*e3 - 3415003447/1372106318229588141130906452086489088*e5 - 37887933381439846/9208049630361023312307649943348178966275475*e6 + 59/3487894260939613054754764201203855261696*e7 - 1/900719925474100*e8 + 1511824885351801/1097685054583672462785079378811289600*e9 - 941579231/6706280594755794253079333086500*e10 - 299/6975788521879238500999179452345745408000*e11 - 3/27922317689697100*e12 + 5701611404543186384946203/1235883500698296368732967212415521293790882876620800*e13 - 32228115656840373151/7550600696896039116092272953545506752345889500*e14 - 4596901290174181/253356117643150755590258278545181865227130989707264000*e15,
 184661621/51872312030630863332831495035289600*e3 - 1/750599937895082*e4 + 1282319099/914737545486392094087270968057659392*e5 + 7629930160084951/3069349876787007770769216647782726322091825*e6 + 19/2179933913087258159221727625752409538560*e7 - 212550725834487/182947509097278743797513229801881600*e9 - 1217167239/1117713432459299042179888847750*e10 - 71/1743947130469809625249794863086436352000*e11 + 3723476742383/4122440976351965533322612050*e12 - 4238645439/3125353280411839654798175807530336256*e13 + 248459890950511729/419477816494224395338459608530305930685882750*e14 - 65003907175317149/1963509911734418355824501658725159455510265170231296000*e15,
 -1/4*e0 + 197/50371909150609504206848*e1 + 3370139823/338040160060861173732454188100*e2 + 13599126993/11342745564031282115445820247716659200*e3 - 1/4503599627370492*e4 + 1359946091/498947752083486596774875073485996032*e5 - 1762024574722037/304398334887967712803558675813162941033900*e6 + 583716272330473/12770796173882395810240661194960386702505789725081600*e7 - 9146561436861829/17014118346046923173168730371574988800*e9 - 4824827483/8315787937497184873818373027260*e10 + 71/6975788521879238500999179452345745408000*e11 - 2095743467207/6183661464527948299983918075*e12 + 131671812631/51142144588557376169424695032314593280*e13 + 327016119164443817/686418245172367192372024813958682432031444500*e14 + 3195065674058729/2618013215645891141099335544966879274013686893641728000*e15]

C6 = finite_dimensional_algebra_format(C6, BO6)
